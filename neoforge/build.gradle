plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.41'
    id 'java-library'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")

    implementation "com.codinglitch.lexiconfig:lexiconfig-api:${lexiconfig_version}"

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"
    runtimeOnly "maven.modrinth:simple-voice-chat:neoforge-${minecraft_version}-${voicechat_version}"

    // Dependencies

    implementation "com.codinglitch.vibrativevoice:vibrativevoice-api:${vibrative_voice_version}"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

java {
    withSourcesJar()
    withJavadocJar()
}

modrinth {
    token = "$modrinth_token"
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionName = "[NEOFORGE] ${full_mod_name} ${version}"
    uploadFile = jar
    additionalFiles = [sourcesJar, javadocJar]
    gameVersions = supported_versions.split(",").toList()
    loaders = ['neoforge']
    changelog = new File("${project.rootDir}/.changelog").text
    dependencies {
        required.project "fabric-api"
        required.project "lexiconfig"
        optional.project "voice-chat-interaction"
        //optional.project "vibrativevoice" not approve yet..
    }

    debugMode = debug_mode.toBoolean()
}

curseforge {
    apiKey = curseforge_token
    project {
        id = curseforge_id
        changelogType = "markdown"
        changelog = file("${project.rootDir}/.changelog")
        releaseType = 'release'
        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'lexiconfig'
            requiredDependency 'voice-chat-interaction'
            //requiredDependency 'vibrativevoice' not approve yet..
        }

        addGameVersion "NeoForge"
        for (final def ver in supported_versions.split(",") ) {
            addGameVersion ver
        }

        mainArtifact(jar) {
            displayName = "[NEOFORGE] ${full_mod_name} ${version}"
        }
        addArtifact sourcesJar
        addArtifact javadocJar
    }

    options {
        debug = debug_mode.toBoolean()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
